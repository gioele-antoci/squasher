import {GoogleSpreadsheet} from 'google-spreadsheet';
import * as dotenv from 'dotenv'
dotenv.config();

async function loadSheet() {
    const doc = new GoogleSpreadsheet('14FDIXd_xBs1H3HfvpI95itS72shSHIrsKWm40STheeE');
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: "squasher@squasher-378604.iam.gserviceaccount.com",
        private_key: process.env["SQUASHER_PRIVATE_KEY"],
    });

    await doc.loadInfo(); // loads document properties and worksheets
    return doc;
}


export interface Booking {
    player_username: string;
    player_password: string;
    court?: number;
    date: string;
    time: string;
    booked_at?: string;
    index: number;
}

export const getSheetRows = async () => {
    const doc = await loadSheet(); // loads document properties and worksheets

    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    console.log(sheet.title);
    console.log(sheet.rowCount);
    const rows = await sheet.getRows();
    return rows;
}

export const markRowAsBooked = async (index: number, success: boolean) => {
    const rows = await getSheetRows();
    const row = rows?.find(r => r.rowIndex === index);
    if (!row) {
        return;
    }
    row.booked_at = success ? new Date().toLocaleString() : "Not Available";
    console.log("Saving row: ", index);
    await row.save();
}
